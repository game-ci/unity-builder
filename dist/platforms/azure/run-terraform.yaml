name: Deploy infra via Terraform
on:
  pull_request:
    branches: [ "main", "testing", "develop" ]
  push:
    branches: [ "main" ]
jobs:
  tf_fmt:
    env:
      ARM_CLIENT_ID: ${{ secrets.CLIENTID }}
      ARM_CLIENT_SECRET: ${{ secrets.CLIENTSECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTIONID }}
      ARM_TENANT_ID: ${{ secrets.TENANTID }}
      TF_ROOT: "."
    name: Terraform Deployment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v1
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Azure CLI script file
      uses: azure/CLI@v1
      with:
        azcliversion: latest
        inlineScript: |
          chmod +x $GITHUB_WORKSPACE/firewall.sh
          bash $GITHUB_WORKSPACE/firewall.sh add

    - name: Logout
      run: az logout
      
    - name: Terraform actions
      uses: hashicorp/setup-terraform@v2

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: false

    - name: Terraform Init
      id: init
      run: terraform init
    
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color 
    
    - name: Terraform Plan and Save
      id: plan
      run: terraform plan -no-color
      continue-on-error: true

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })
    
          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>
    
          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`
    
          </details>
    
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
          
          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
          
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
      
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
          
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Azure CLI script file
      uses: azure/CLI@v1
      with:
        azcliversion: latest
        inlineScript: |
          chmod +x $GITHUB_WORKSPACE/firewall.sh
          bash $GITHUB_WORKSPACE/firewall.sh remove

    - name: Fail gracefully
      if: ${{ failure() }}
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Fail gracefully
      if: ${{ failure() }}
      uses: azure/CLI@v1
      with:
        azcliversion: latest
        inlineScript: |
          chmod +x $GITHUB_WORKSPACE/firewall.sh
          bash $GITHUB_WORKSPACE/firewall.sh remove
